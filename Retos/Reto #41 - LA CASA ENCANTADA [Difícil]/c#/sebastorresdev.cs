using System.Text;

namespace ConsoleApp;

internal class Program
{
    static void Main(string[] args)
    {
        Board board = new(4);
        GameBoard gameBoard = new(board);
        QuizGame game = new(gameBoard);
        game.Run();
    }
}

public class QuizGame
{
    private GameBoard _gameBoard;

    private readonly List<Quiz> _questions;
    private int _currentQuestionIndex;
    private int _live;

    public QuizGame(GameBoard gameBoard)
    {
        _questions = LoadQuestions();
        _currentQuestionIndex = 0;
        _live = 5;
        _gameBoard = gameBoard;

        Console.OutputEncoding = Encoding.UTF8;
        Console.Title = "La casa encantada";
        Instructions();
    }

    private static void Instructions()
    {
        string prompt = @"
¬°Bienvenido a la Mansi√≥n Encantada!
-----------------------------------

Est√°s a punto de embarcarte en una aventura tenebrosa en una mansi√≥n abandonada llena de misterios y acertijos. 
Tu misi√≥n es encontrar la elusiva habitaci√≥n de los dulces escondidos en esta casa embrujada.

üè∞ La Mansi√≥n:
La mansi√≥n cuanta con habitacones donde habra una puerta de inicio y usted tendra que desplazarse 
hasta encontrar la habilation de duces, si cae en una habitacion de fantasma tendra que resolver dos 
acertijos para poder salir de alli. todas las habitaciones cuentan con acertijos o fantasmas.

Prep√°rate para adentrarte en la oscuridad y demostrar tu astucia resolviendo enigmas. 
¬øEst√°s listo para enfrentar los desaf√≠os de la Mansi√≥n Encantada? ¬°Buena suerte!

Presiona una tecla para iniciar...
";

        Console.WriteLine(prompt);
        Console.ReadKey();
    }
    public void Run()
    {
        Console.Clear();
        Random random = new ();

        while (true)
        {
            _gameBoard.Run();
            int count = _gameBoard.GetNumberOfQuestions();
            
            while (0 < count)
            {
                _gameBoard.DisplayBoard();
                ShowLive();

                if (count == 3)
                {
                    Console.WriteLine("üéâ ¬°FELICIDADES, HAS GANADO! üéâ");
                    Console.WriteLine("Presione un tacla para salir...");
                    Console.ReadKey();
                    return;
                }

                _currentQuestionIndex = random.Next(_questions.Count - 1);
                DisplayQuestion();

                var answer = Console.ReadLine().ToUpper();

                if (ValidateAnswer(answer))
                {
                    Console.ForegroundColor = ConsoleColor.DarkYellow;
                    Console.WriteLine("üéâ Respuesta correcta! üéâ");
                    count--;
                }
                else
                {
                    Console.ForegroundColor = ConsoleColor.DarkRed;
                    Console.WriteLine("üíÄ Respuesta incorrecta! üíÄ");
                    _live--;
                    ShowAnswer();
                }
                Console.ResetColor();
                if (_live == 0)
                {
                    Console.WriteLine("‚ùå GAME OVER ‚ùå");
                    Console.WriteLine("Presione un tacla para volver al menu principal...");
                    Console.ReadKey();
                    return;
                }
            }
        }
    }

    private void ShowLive()
    {
        Console.WriteLine($"Vida: {_live}");
    }

    private bool ValidateAnswer(string answer)
    {
        var quiz = _questions[_currentQuestionIndex];
        if (answer.Length == 1 && char.ToUpper(answer[0]) >= 'A' && char.ToUpper(answer[0]) < 'A' + quiz.Options.Count)
        {
            int selectOption = char.ToUpper(answer[0]) - 'A';
            return selectOption == quiz.Answer;
        }
        return false;
    }

    private void ShowAnswer()
    {
        var quiz = _questions[_currentQuestionIndex];
        Console.ForegroundColor = ConsoleColor.DarkGray;
        Console.WriteLine($"La respuesta correcta es: {quiz.Options[quiz.Answer]}");
    }

    private static List<Quiz> LoadQuestions()
    {
        // Tambien se puede extraer de una fuente externa
        return new()
        {
            new Quiz()
            {
                Question = " ¬øQu√© es lo que tiene ojos pero no puede ver?",
                Answer = 0,
                Options = new List<string>{ "Un libro.", "Un tel√©fono.", "Un pez.", "Un √°rbol." }
            },  // 1
            new Quiz()
            {
                Question = "¬øQu√© palabra se escribe incorrectamente en todos los diccionarios?",
                Answer = 0,
                Options = new List<string>{ "Incorrectamente.", "Palabra.", "Diccionarios.", "Todos." }
            },  // 2
            new Quiz()
            {
                Question = "Si tienes tres manzanas y tomas dos, ¬øcu√°ntas manzanas te quedan?",
                Answer = 3,
                Options = new List<string>{ "Ninguna.", "Una.", "Dos.", "Tres." }
            },  // 3
            new Quiz()
            {
                Question = "Si un avi√≥n se estrella justo en la frontera entre Estados Unidos y Canad√°, ¬ød√≥nde entierras a los sobrevivientes?",
                Answer = 2,
                Options = new List<string>{ "En Estados Unidos.", "En Canad√°.", "No los entierras.", "En la frontera." }
            },  // 4
            new Quiz()
            {
                Question = "Si tienes un cubo de hielo en un vaso y el hielo se derrite, ¬øqu√© le sucede al nivel del agua?",
                Answer = 2,
                Options = new List<string>{ "Aumenta.", "Disminuye.", "Permanece igual.", "Depende del clima." }
            },  // 5
            new Quiz()
            {
                Question = "¬øCu√°l es la pr√≥xima letra en esta serie: A, E, I, M, ___?",
                Answer = 1,
                Options = new List<string>{ "O.", "U.", "R.", "L." }
            },  // 6
            new Quiz()
            {
                Question = "Cuanto m√°s lo quites, m√°s grande se vuelve. ¬øQu√© es?",
                Answer = 0,
                Options = new List<string>{ "Un agujero.", "Un √°rbol.", "Un libro.", "Un coche." }
            },  // 7
            new Quiz()
            {
                Question = "¬øCu√°ntos meses tienen 28 d√≠as?",
                Answer = 2,
                Options = new List<string>{ "Uno.", "Seis.", "Todos.", "Doce." }
            },  // 8
            new Quiz()
            {
                Question = "¬øCu√°l es el animal que camina por la ma√±ana con cuatro patas, por la tarde con dos patas y por la noche con tres patas?",
                Answer = 2,
                Options = new List<string>{ "Perro.", "Gato.", "Hombre.", "Elefante." }
            },  // 9
            new Quiz()
            {
                Question = "Tengo llaves pero no puedo abrir ninguna puerta. ¬øQu√© soy?",
                Answer = 3,
                Options = new List<string>{ "Una computadora.", "Una escuela.", "Un m√∫sico.", "Un libro." }
            },  // 10
            new Quiz()
            {
                Question = "¬øQu√© es lo que puede viajar alrededor del mundo sin moverse?",
                Answer = 0,
                Options = new List<string>{ "Una carta.", "Un tel√©fono.", "Un avi√≥n.", "El viento." }
            },  // 11
            new Quiz()
            {
                Question = "¬øQu√© es lo que es m√≠o y sin embargo, lo usas m√°s que yo?",
                Answer = 0,
                Options = new List<string>{ "Mi nombre.", "Mis zapatos.", "Mi casa.", "Mi tel√©fono." }
            },  // 12
            new Quiz()
            {
                Question = "Si lanzas una moneda al aire, ¬øcu√°les son las posibilidades de que caiga de canto?",
                Answer = 1,
                Options = new List<string>{ "50%.", "0%.", "25%.", "75%." }
            },  // 13
            new Quiz()
            {
                Question = "¬øQu√© palabra se deletrea incorrectamente en todos los diccionarios?",
                Answer = 1,
                Options = new List<string>{ "Incorrectamente.", "Deletrea.", "Diccionarios.", "Todos." }
            },  // 14
            new Quiz()
            {
                Question = "¬øQu√© es lo que tiene dientes pero no puede masticar?",
                Answer = 1,
                Options = new List<string>{ "Un le√≥n.", "Un engranaje.", "Un tren.", "Un piano." }
            },  // 15
            new Quiz()
            {
                Question = "Cuando intento comer, estoy roto. Cuando bebo, estoy bien. ¬øQu√© soy?",
                Answer = 0,
                Options = new List<string>{ "Un vaso.", "Un plato.", "Un tenedor.", "Un cuchillo." }
            },  // 16
            new Quiz()
            {
                Question = "¬øQu√© elemento qu√≠mico es representado por el s√≠mbolo 'Fe' en la tabla peri√≥dica?",
                Answer = 2,
                Options = new List<string> { "Hidr√≥geno", "Ox√≠geno", "Hierro", "Plata" }
            },  // 17
            new Quiz()
            {
                Question = "¬øCu√°l es el planeta m√°s cercano al Sol en nuestro sistema solar?",
                Answer = 2,
                Options = new List<string> { "Venus", "Marte", "Mercurio", "J√∫piter" }
            }, // 18
            new Quiz()
            {
                Question = "¬øCu√°l es el proceso por el cual las plantas convierten la luz solar en energ√≠a qu√≠mica?",
                Answer = 0,
                Options = new List<string> { "Fotos√≠ntesis", "Respiraci√≥n", "Evaporaci√≥n", "Descomposici√≥n" }
            }, // 19
            new Quiz()
            {
                Question = "¬øCu√°l es la unidad b√°sica de la herencia gen√©tica?",
                Answer = 2,
                Options = new List<string> { "Prote√≠na", "√Åcido ribonucleico (ARN)", "Gen", "C√©lula" }
            }, // 20
            new Quiz()
            {
                Question = "¬øCu√°l es la f√≥rmula qu√≠mica del agua?",
                Answer = 0,
                Options = new List<string> { "H2O", "CO2", "CH4", "NaCl" }
            }, // 21
            new Quiz()
            {
                Question = "¬øCu√°l es el proceso por el cual la sangre circula por el cuerpo humano?",
                Answer = 2,
                Options = new List<string> { "Respiraci√≥n", "Digesti√≥n", "Circulaci√≥n", "Excreci√≥n" }
            }, // 22
            new Quiz()
            {
                Question = "¬øQu√© famoso cient√≠fico formul√≥ la teor√≠a de la relatividad?",
                Answer = 2,
                Options = new List<string> { "Isaac Newton", "Charles Darwin", "Albert Einstein", "Galileo Galilei" }
            }, // 23
            new Quiz()
            {
                Question = "¬øCu√°l es la capa exterior s√≥lida de la Tierra?",
                Answer = 2,
                Options = new List<string> { "N√∫cleo", "Manto", "Corteza", "Magma" }
            }, // 24
            new Quiz()
            {
                Question = "¬øQu√© gas es esencial para la fotos√≠ntesis y es liberado por los seres humanos al exhalar?",
                Answer = 1,
                Options = new List<string> { "Ox√≠geno", "Di√≥xido de carbono", "Nitr√≥geno", "Hidr√≥geno" }
            }, // 25
            new Quiz()
            {
                Question = "¬øCu√°l es la fuerza que atrae dos objetos con masa entre s√≠?",
                Answer = 2,
                Options = new List<string> { "Fuerza electromagn√©tica", "Fuerza nuclear fuerte", "Fuerza gravitatoria", "Fuerza de fricci√≥n" }
            } // 26
        };
    }

    private void DisplayQuestion()
    {
        var quiz = _questions[_currentQuestionIndex];

        Console.ForegroundColor = ConsoleColor.DarkMagenta;
        Console.WriteLine($"Acertijo: {quiz.Question}");
        char option = 'A';

        Console.ForegroundColor = ConsoleColor.Gray;
        foreach (var choice in quiz.Options)
        {
            Console.WriteLine($"Opci√≥n {option}: {choice}");
            option++;
        }

        Console.ForegroundColor = ConsoleColor.DarkGreen;
        Console.Write("Tu respuesta: ");
    }
}

public class Quiz
{
    public int Answer { get; set; }
    public string Question { get; set; } = string.Empty;
    public List<string> Options { get; set; } = new();
}

public class Room
{
    public bool IsActive { get; set; }
    public string Content { get; set; }
    public Room(string content, bool isActive = false)
    {
        IsActive = isActive;
        Content = content;
    }
    public override string ToString()
    {
        return IsActive ? Content : "üî≤";
    }
}

public class Board
{
    public int Side { get; set; }
    public Room[] Matrix { get; set; }

    public Board(int side)
    {
        Side = side;
        Matrix = new Room[Side * Side];
        InitializeBoard();
    }

    private void InitializeBoard()
    {
        for (int i = 0; i < Side * Side; i++)
        {
            var room = new Room("‚ùì");
            Matrix[i] = room;
        }
    }
}

#region Tablero de juego
public class GameBoard
{
    private Board _board;
    private int _currentPosition;
    private int _side;

    public int CurrentPosition { get => _currentPosition; set => _currentPosition = value; }

    public GameBoard(Board board)
    {
        _board = board;
        _side = board.Side;
        _currentPosition = InitializeInitialDoor();
        AssignRoom();
    }

    private void AssignRoom()
    {
        Random random = new();
        int index = random.Next(_side * _side);

        // asginamos el dulce
        while (_board.Matrix[index].Content != "‚ùì")
        {
            index = random.Next(_side * _side);
        }
        _board.Matrix[index] = new Room("üç≠");

        // Obtenemos la cantidad de fantasma que apareceran
        // considerandose que minimanete haya 2 fantasmas
        int countGhost = random.Next(2, _side * _side - 4); 

        // Asignamos los fantasmas
        index = random.Next(_side * _side);
        for (int i = 0; i < countGhost; i++)
        {
            while (_board.Matrix[index].Content != "‚ùì")
            {
                index = random.Next(_side * _side);
            }
            _board.Matrix[index] = new Room("üëª");
        }
    }
    private int InitializeInitialDoor()
    {
        Random random = new();
        int index = random.Next(_side * _side);

        // Asigna solo a los extremos
        while (!(index <= _side || index >= (_side * (_side - 1)) || index % _side == 0 || (index + 1) % _side == 0))
        {
            index = random.Next(_side * _side);
        }

        _board.Matrix[index] = new Room("üö™", true);
        return index;
    }
    
    public void Run()
    {
        DisplayBoard();
        string input = Input.ReadInput(GetMessage());
        while (!ValidateMove(input))
        {
            Console.WriteLine("Moviemiento no valido");
            input = Input.ReadInput(GetMessage());
        }
        MovePlayer(input);
    }

    public int GetNumberOfQuestions()
    {
        if (_board.Matrix[_currentPosition].Content == "‚ùì") return 1;
        if (_board.Matrix[_currentPosition].Content == "üëª") return 2;
        if (_board.Matrix[_currentPosition].Content == "üç≠") return 3;
        return 0;
    }
    private string GetMessage()
    {
        string ms = string.Empty;
        ms += ValidateMove("N") ? "N ‚Üë - " : "";
        ms += ValidateMove("S") ? "S ‚Üì - " : "";
        ms += ValidateMove("E") ? "E ‚Üí - " : "";
        ms += ValidateMove("W") ? "W ‚Üê - " : "";
        return ms;
    }
    private bool ValidateMove(string move)
    {
        if (move == "E" && (_currentPosition + 1) % _side == 0)     return false;
        if (move == "W" && _currentPosition % _side == 0)           return false;
        if (move == "N" &&  _currentPosition < _side)               return false;
        if (move == "S" && _currentPosition >= _side * (_side - 1)) return false;

        return true;
    }
    private void MovePlayer(string move)
    {
        _currentPosition += move == "E" ? 1 : 0;
        _currentPosition -= move == "W" ? 1 : 0;
        _currentPosition -= move == "N" ? _side : 0;
        _currentPosition += move == "S" ? _side : 0;
        _board.Matrix[_currentPosition].IsActive = true;
    }
    public void DisplayBoard()
    {
        int index, side = _board.Side;
        for (int i = 0; i < side; i++)
        {
            for (int j = 0; j < side; j++)
            {
                index = side * i + j;
                if (index == _currentPosition) Console.Write("üßõ");
                else Console.Write("  ");
                
                if (index == _currentPosition) Console.Write(_board.Matrix[index]);
                else Console.Write(_board.Matrix[index]);
            }
            Console.WriteLine();
        }
    }
}
#endregion

public static class Input
{
    public static string ReadInput(string ms)
    {
        string inputKey;
        Console.WriteLine($"Donde quieres desplazarte {ms}\b\b  ");
        inputKey = Console.ReadLine().ToUpper();

        while (inputKey != "N" && inputKey != "S" && inputKey != "E" && inputKey != "W")
        {
            Console.WriteLine("Opcion Invalida");
            inputKey = Console.ReadLine().ToUpper();
        }
        return inputKey;
    }
}