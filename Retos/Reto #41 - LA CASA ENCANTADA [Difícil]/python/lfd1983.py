# /* RETO #41:  LA CASA ENCANTADA DE MOUREDEV
#  * Este es un reto especial por Halloween.
#  * Te encuentras explorando una mansi√≥n abandonada llena de habitaciones.
#  * En cada habitaci√≥n tendr√°s que resolver un acertijo para poder avanzar a la siguiente.
#  * Tu misi√≥n es encontrar la habitaci√≥n de los dulces.
#  *
#  * Se trata de implementar un juego interactivo de preguntas y respuestas por terminal.
#  * (Tienes total libertad para ser creativo con los textos)
#  *
#  * - üè∞ Casa: La mansi√≥n se corresponde con una estructura cuadrada 4 x 4
#  *   que deber√°s modelar. Las habitaciones de puerta y dulces no tienen enigma.
#  *   (16 habitaciones, siendo una de entrada y otra donde est√°n los dulces)
#  *   Esta podr√≠a ser una representaci√≥n:
#  *   üö™‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è
#  *   ‚¨úÔ∏èüëª‚¨úÔ∏è‚¨úÔ∏è
#  *   ‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏èüëª
#  *   ‚¨úÔ∏è‚¨úÔ∏èüç≠‚¨úÔ∏è
#  * - ‚ùì Enigmas: Cada habitaci√≥n propone un enigma aleatorio que deber√°s responder con texto.
#  *   Si no lo aciertas no podr√°s desplazarte.
#  * - üß≠ Movimiento: Si resuelves el enigma se te preguntar√° a donde quieres desplazarte.
#  *   (Ejemplo: norte/sur/este/oeste. S√≥lo deben proporcionarse las opciones posibles)
#  * - üç≠ Salida: Sales de la casa si encuentras la habitaci√≥n de los dulces.
#  * - üëª (Bonus) Fantasmas: Existe un 10% de que en una habitaci√≥n aparezca un fantasma y
#  *   tengas que responder dos preguntas para salir de ella.
#  */

def generarMansion():
    #devuelve una lista con 16 elementos de la mansion: habitaciones vac√≠as, fantasmas random 
    #puerta de entrada y habitaci√≥n de los dulces

    import random    

    vectorMansion = list('‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú')

    # vector posiciones mantiene las posiciones no asignadas
    posiciones = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
    
    posicionEntrada = posiciones[random.randint(0,len(posiciones)-1)]
    # elimino las posiciones ya sorteadas, para no sobreescribir
    posiciones.remove(posicionEntrada)

    posicionDulces = posiciones[random.randint(0,len(posiciones)-1)]
    posiciones.remove(posicionDulces)
    
    vectorMansion[posicionEntrada]="üö™" #genero entrada en posicion random
    vectorMansion[posicionDulces]="üç≠"    

    for pos in posiciones: #10% de probabilidad de encontrar un fantasma en los cuartos restantes
        if random.randint(0,9) == 0:
            vectorMansion[pos] = "üëª"
    return vectorMansion

    
def mostrarMansionCompleta(vectorMansion):
    #funci√≥n para prueba, muestra la mansion completa
    #  
    mansion = [vectorMansion[0:4],vectorMansion[4:8],vectorMansion[8:12],vectorMansion[12:16]]
    for m in mansion:
        print(m)

def mostrarMansion(vectorMansion,posicionActual,juegoTerminado):
   
    copiaMansion = vectorMansion.copy()
    print("\nEste es el plano de la Mansi√≥n Embrujada:")
    for i in range(0,len(copiaMansion)):
        if copiaMansion[i] != "üö™" :
            copiaMansion[i] = "‚¨ú"

    copiaMansion[posicionActual]= "üßë"
    if juegoTerminado: #en caso de juegoTerminado reemplazo la persona por la habitaci√≥n de los dulces
        copiaMansion[posicionActual]="üç≠" 

    mansionMatriz = [copiaMansion[0:4],copiaMansion[4:8],copiaMansion[8:12],copiaMansion[12:16]]
    for m in mansionMatriz:
        print(" ".join(m))
    print("")

def obtenerMovimientosPosibles(posicionActual):
    direcciones = {
        "N":["Norte",True],
        "S":["Sur",True],
        "E":["Este",True],
        "O":["Oeste",True]
    }
    if posicionActual in [0,1,2,3]:
        direcciones["N"] = ["Norte",False]
    if posicionActual in [12,13,14,15]:
        direcciones["S"] = ["Sur",False]
    if posicionActual in [0,4,8,12]:
        direcciones["O"] = ["Oeste",False]
    if posicionActual in [3,7,11,15]:
        direcciones["E"] = ["Este",False]
    
    return direcciones #retorna diccionario con las direcciones 

def obtenerDireccion(posicionActual):
    #muestra las opciones posibles de direcci√≥n y obtiene la elecci√≥n del usuario

    print("¬øEn qu√© direcci√≥n quieres desplazarte?")
    direcciones = obtenerMovimientosPosibles(posicionActual)
    opcionesDisponibles=[]

    for clave,valor in direcciones.items():
        if valor[1]:
            print(f'Ingresa {clave} para desplazarte al {valor[0]}')
            opcionesDisponibles.append(clave)    

    direccionElegida = input("-->").upper()

    if not direccionElegida in opcionesDisponibles:
        print("Opci√≥n Incorrecta")
        
    else:
        return direccionElegida


def desplazar(posicionActual,direccionElegida):
    #retorna nueva posici√≥n seg√∫n la direcci√≥n elegida
    
    if direccionElegida == "N":
        posicionActual -=4
    elif direccionElegida == "S":
        posicionActual += 4
    elif direccionElegida == "E":
        posicionActual += 1
    elif direccionElegida == "O":
        posicionActual -= 1
    
    return posicionActual

def generarEnigmasPorHabitacion(mansion):
    #construye un diccionario con el nro de habitaci√≥n como clave y los acertijos como valor

    import random 

    enigmas = [["5-2= ","3"],["17-7= ","10"],["98-18= ","80"],["25-20= ","5"],["50*4= ","200"],["5-2= ","3"],["17-7= ","10"],["98-18= ","80"],["25-20= ","5"],["50*4= ","200"],["5-2= ","3"],["17-7= ","10"],["98-18= ","80"],["25-20= ","5"],["50*4= ","200"],["5-2= ","3"],["17-7= ","10"],["98-18= ","80"],["25-20= ","5"],["50*4= ","200"],["5-2= ","3"],["17-7= ","10"],["98-18= ","80"],["25-20= ","5"],["50*4= ","200"],["5-2= ","3"],["17-7= ","10"],["98-18= ","80"],["25-20= ","5"],["50*4= ","200"]]

    enigmasPorHabitaci√≥n = {}

    for i in range(0,len(mansion)):         
        if mansion[i] == "üëª": #la habitaci√≥n del fantasma tiene 2 enigmas            
            aleatorio = random.randint(0,len(enigmas)-1)            
            enigma1 =  enigmas[aleatorio]         
            del(enigmas[aleatorio]) # los enigmas utilizados se van eliminando

            aleatorio = random.randint(0,len(enigmas)-1)
            enigma2 = enigmas[aleatorio]
            del(enigmas[aleatorio])

            enigmasPorHabitaci√≥n[i] = [enigma1, enigma2]
           
        elif  mansion[i] == "üö™" or mansion[i]== "üç≠": #la puerta no tiene enigma
            enigmasPorHabitaci√≥n[i] = []

        elif mansion[i]== "‚¨ú": #la habitaci√≥n vac√≠a tiene un enigma
            aleatorio = random.randint(0,len(enigmas)-1)            
            enigmasPorHabitaci√≥n[i] = [enigmas[aleatorio]]
            del(enigmas[aleatorio])

    return enigmasPorHabitaci√≥n             


def resolverEnigmas(habitacion,mansion,enigmasPorHabitacion):
    
     
    if mansion[habitacion] == "üëª" or mansion[habitacion] == "‚¨ú": 
      #en estos casos debe responder preguntas
      
      pregunta="pregunta" #para mostrar "pregunta" o "preguntas" seg√∫n corresponda
      if mansion[habitacion] == "üëª":
          pregunta="preguntas"

      print(f'Para salir de esta habitaci√≥n: {mansion[habitacion]} debes responder {len(enigmasPorHabitacion[habitacion])} {pregunta}')

      for i in enigmasPorHabitacion[habitacion]:
          respuesta = input(f'Responde: {i[0]}')
          if respuesta == i[1]:
              print("Respuesta correcta")
              continue
          else:
              print("Respuesta incorrecta, no puedes salir de esta habitaci√≥n")
              return False #al responder incorrectamente una de las preguntas de la habitaci√≥n retorna False
    return True

def juego():
    import os
    mansion = generarMansion()       
    enigmasPorHabitacion = generarEnigmasPorHabitacion(mansion)

    posicionActual = mansion.index("üö™")
    
    print("*****  Bienvenido al Juego de la Mansi√≥n Embrujada  ******")
    print("Debes moverte por las habitaciones de la Mansi√≥n Embrujada hasta encontrar la Habitaci√≥n de los Dulces \nPara salir de una habitaci√≥n vac√≠a debes resolver un enigma\nPara salir de una habitaci√≥n con fastasma debes resolver dos enigmas\n M ¬°Mucha Suerte!!!")
    # mostrarMansionCompleta(mansion)

    while True:
        
        mostrarMansion(mansion,posicionActual,False)

        if mansion[posicionActual] == "üç≠": # el juego ha terminado
            break
        
        elif resolverEnigmas(posicionActual,mansion,enigmasPorHabitacion): #si ha resuelto los enigmas
            direccionElegida = obtenerDireccion(posicionActual)                    
            if direccionElegida:
              posicionActual = desplazar(posicionActual,direccionElegida)

        else: #si no ha resuelto los enigmas
            input("Presiona una tecla para continuar")
        os.system('cls')
    
    os.system('cls')
    print("********** GANASTE!!! \n\nEncontraste la habitaci√≥n de los dulces\ny lograrse salir de la Mansi√≥n Embrujada")
    mostrarMansion(mansion,posicionActual,True)
    input("Presiona una tecla para Salir")

juego()


